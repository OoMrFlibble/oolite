/*! \mainpage How to use Oolite API documentation
 *
 * \section intro_sec Introduction
 *
 * This documentation was generated automatically based on the Oolite source code.
 * That means you only see information that was in the source code anyway but
 * extracted and shaped into an easy to browse hypermedia documentation. Links
 * to related information make getting along much easier.
 *
 * In the top of the page you can find the project and version this documentation
 * was created for. In the menu bar below you see four entries.
 *
 * Currently you are reading the main page. The next section 'Topics' leads to 
 * special pages for different topics.
 * The section 'Classes' allows you to quickly browse the classes used in the 
 * project. Alhpabetically, but also graphically through class inheritance
 * diagrams. The 'Files' section allows you to navigate not by class name but by
 * source code location. Use whichever way feels more comfortable for your use
 * case.
 *
 * Once you found the class/file of interest, read that page and also look for
 * sections that can be expanded. Here you find inheritance and collaboration
 * diagrams that can help navigate around quickly.
 *
 * Also note that there is a growing amount of information in the
 * Developer's Corner at https://wiki.alioth.net/index.php/Developer%27s_Corner.
 *
 * \section structure Oolite Code Structure
 *
 * There are two entry points:
 * <ul>
 *   <li><a href="https://github.com/OoliteProject/oolite/blob/master/src/Cocoa/main.m#L11">int main(int argc, const char *argv[])</a><br/>
 *     for MacOS
 *   </li>
 *   <li><a href="https://github.com/OoliteProject/oolite/blob/master/src/SDL/main.m#L53">int main(int argc, char *argv[])</a><br/>
 *     for Linux and Windows
 *   </li>
 * </ul>
 *
 * These two may process the command line arguments. But watch out, other classes or functions may do so, too. Check for uses of
 * NSProcessInfo, as it happens e.g. in src/SDL/MyOpenGLView.m or src/Core/Entities/PlayerEntity.m.
 *
 * \section maintenance Maintaining this documentation
 *
 * \subsection comments Enriching the code
 *
 * As mentioned above, this documentation contains all the information from
 * the source code. Of course you can enrich the source with more information
 * easily. The huge advanatage is that you do not even need to leave your
 * favourite editing tool. Just add comments in a way that doxygen can
 * recognize - and this is a small change only.
 *
 * This entry page can be found under Doc/ApiDocIntro.dox.
 * The current state can be seen in the <a href="coverage/index.html">Documentation Coverage Report</a>.
 *
 * See more at 
 * <a href="https://www.doxygen.nl/manual/docblocks.html">Documenting the code</a>
 *
 * \subsection processing Generating this documentation
 *
 * To generate the most up to date documentation, just invoke Doxygen from the
 * project's main directory. All the necessary settings are in the Doxyfile
 * already.
 *
 * On top of that, the project is configured to automatically build the
 * documentation on every change on the master branch.
 *
 */
 
 /**
  * \defgroup cli Command Line Interface
  * The command line is parsed and interpreted at various locations in the code.
  * Here are the known functions that participate on cli arguments.
  * 
  */
  
 /**
  * \defgroup coverage Code Coverage Report
  * This documentation is created using Doxygen. On top of that
  * there is a <a href="coverage/index.html">Documentation Coverage Report</a> 
  * available that was generated using coverxygen.
  */
